// Angular 2 Toolkit - Firebase Observables
// Copyright 2015-2016 Oasis Digital - http://oasisdigital.com
//     written by Kyle Cordes - http://kylecordes.com
// started November 2015
System.register(['rxjs/Observable'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Observable_1;
    // TODO How do I type this without adding another dependency on @reactivex/rxjs?
    // import { Subscriber } from '@reactivex/rxjs/dist/cjs/Rx';
    function observableFirebaseObject(ref) {
        return Observable_1.Observable.create(function (observer) {
            function value(snapshot) {
                observer.next(snapshot.val());
            }
            ref.on('value', value);
            return function () {
                ref.off('value', value);
            };
        });
    }
    exports_1("observableFirebaseObject", observableFirebaseObject);
    function findInArray(list, predicate) {
        for (var i = 0; i < list.length; i++) {
            var value = list[i];
            if (predicate.call(this, value, i, list)) {
                return value;
            }
        }
    }
    function observableFirebaseArray(ref) {
        return Observable_1.Observable.create(function (observer) {
            // Looking for how to type this well.
            var arr = [];
            var keyFieldName = "$$fbKey";
            function child_added(snapshot, prevChildKey) {
                var child = snapshot.val();
                child[keyFieldName] = snapshot.key();
                var prevEntry = findInArray(arr, function (y) { return y[keyFieldName] === prevChildKey; });
                arr.splice(arr.indexOf(prevEntry) + 1, 0, child);
                observer.next(arr.slice()); // Safe copy
            }
            function child_changed(snapshot) {
                var key = snapshot.key();
                var child = snapshot.val();
                // TODO replace object rather than mutate it?
                var x = findInArray(arr, function (y) { return y[keyFieldName] === key; });
                if (x) {
                    for (var k in child)
                        x[k] = child[k];
                }
                observer.next(arr.slice()); // Safe copy
            }
            function child_removed(snapshot) {
                var key = snapshot.key();
                var child = snapshot.val();
                var x = findInArray(arr, function (y) { return y[keyFieldName] === key; });
                if (x) {
                    arr.splice(arr.indexOf(x), 1);
                }
                observer.next(arr.slice()); // Safe copy
            }
            function child_moved(snapshot, prevChildKey) {
                var key = snapshot.key();
                var child = snapshot.val();
                child[keyFieldName] = key;
                // Remove from old slot
                var x = findInArray(arr, function (y) { return y[keyFieldName] === key; });
                if (x) {
                    arr.splice(arr.indexOf(x), 1);
                }
                // Add in new slot
                var prevEntry = findInArray(arr, function (y) { return y[keyFieldName] === prevChildKey; });
                if (prevEntry) {
                    arr.splice(arr.indexOf(prevEntry) + 1, 0, child);
                }
                else {
                    arr.splice(0, 0, child);
                }
                observer.next(arr.slice()); // Safe copy
            }
            // Start out empty, until data arrives
            observer.next(arr.slice()); // Safe copy
            ref.on('child_added', child_added);
            ref.on('child_changed', child_changed);
            ref.on('child_removed', child_removed);
            ref.on('child_moved', child_moved);
            return function () {
                ref.off('child_added', child_added);
                ref.off('child_changed', child_changed);
                ref.off('child_removed', child_removed);
                ref.off('child_moved', child_moved);
            };
        });
    }
    exports_1("observableFirebaseArray", observableFirebaseArray);
    return {
        setters:[
            function (Observable_1_1) {
                Observable_1 = Observable_1_1;
            }],
        execute: function() {
        }
    }
});
//# sourceMappingURL=observableFirebase.js.map