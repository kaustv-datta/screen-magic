// Angular 2 Toolkit - ngWhen
// Copyright 2015-2016 Oasis Digital - http://oasisdigital.com
//     written by Kyle Cordes - http://kylecordes.com
// started November 2015
System.register(['angular2/src/core/metadata', 'angular2/core', 'angular2/src/core/linker', 'angular2/src/facade/lang'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var metadata_1, core_1, linker_1, lang_1;
    var NgWhen;
    /**
     * TODO document this like NgIf and NgFor,
     * The following is some text from the docs for those things, here for reference.
     *
     * Removes or recreates a portion of the DOM tree based on an {expression}.
     *
     * If the expression assigned to `ng-if` evaluates to a false value then the element
     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
     *
     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
     *
     * ```
     * <div *ng-if="errorCount > 0" class="error">
     *   <!-- Error message displayed when the errorCount property on the current context is greater
     * than 0. -->
     *   {{errorCount}} errors detected
     * </div>
     * ```
     *
     *##Syntax
     *
     * - `<div *ng-if="condition">...</div>`
     * - `<div template="ng-if condition">...</div>`
     * - `<template [ng-if]="condition"><div>...</div></template>`
    
     * The `NgWhen` directive instantiates a template once per item from an iterable. The context for
     * each instantiated template inherits from the outer context with the given loop variable set
     * to the current item from the iterable.
     *
     * # Change Propagation
     *
     * When the contents of the iterator changes, `NgWhen` makes the corresponding changes to the DOM:
     *
     * * When the item becomes non-null, an instance of the template is added to the DOM.
     * * When the item becomes null, its template instance is removed from the DOM.
     *
     * # Syntax
     *
     * - `<li *ng-for="#item of items; #i = index">...</li>`
     * - `<li template="ng-for #item of items; #i = index">...</li>`
     * - `<template ng-for #item [ng-for-of]="items" #i="index"><li>...</li></template>`
     *
     * ### Example
     *
     * See a [live demo](TODO) for a more detailed
     * example.
     */
    function presentNotFalse(x) {
        return lang_1.isPresent(x) && x !== false;
    }
    return {
        setters:[
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (linker_1_1) {
                linker_1 = linker_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            }],
        execute: function() {
            NgWhen = (function () {
                function NgWhen(_viewContainer, _templateRef, _cdr) {
                    this._viewContainer = _viewContainer;
                    this._templateRef = _templateRef;
                    this._cdr = _cdr;
                    /** @internal */
                    this._prevCondition = null;
                    // TODO remove _prevCondition, the viewRef is enough.
                    this._viewRef = null;
                }
                Object.defineProperty(NgWhen.prototype, "ngWhenIs", {
                    set: function (newCondition) {
                        if (presentNotFalse(newCondition) && !presentNotFalse(this._prevCondition)) {
                            this._viewRef = this._viewContainer.createEmbeddedView(this._templateRef);
                            this._viewRef.setLocal('\$implicit', newCondition);
                        }
                        else if (!presentNotFalse(newCondition) && presentNotFalse(this._prevCondition)) {
                            this._viewContainer.clear();
                            this._viewRef = null;
                        }
                        this._prevCondition = newCondition;
                        if (presentNotFalse(newCondition)) {
                            this._viewRef.setLocal('\$implicit', newCondition);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgWhen.prototype, "ngWhenTemplate", {
                    set: function (value) {
                        if (lang_1.isPresent(value)) {
                            this._templateRef = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                NgWhen = __decorate([
                    metadata_1.Directive({ selector: '[ngWhen][ngWhenIs]', inputs: ['ngWhenIs', 'ngWhenTemplate'] }), 
                    __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, core_1.ChangeDetectorRef])
                ], NgWhen);
                return NgWhen;
            }());
            exports_1("NgWhen", NgWhen);
        }
    }
});
//# sourceMappingURL=ngWhen.js.map